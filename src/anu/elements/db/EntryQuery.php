<?php
/**
 * Created by PhpStorm.
 * User: SECONDRED
 * Date: 24.12.2017
 * Time: 18:50
 */

namespace anu\elements\db;

use Anu;
use anu\models\Section;
use anu\records\EntryRecord;
use anu\records\SectionRecord;
use anu\records\UserRecord;

class EntryQuery extends ElementQuery
{
    /** @var bool */
    public $enabled;
    /** @var int */
    public $typeId;
    /** @var int */
    public $authorId;
    /** @var \DateTime */
    public $postDate;
    /** @var \DateTime */
    public $expiryDate;
    /** @var int */
    public $sectionId;

    /**
     * Custom search
     *
     * @param $value
     *
     * @return $this
     */
    public function enabled($value)
    {
        $this->enabled = $value;

        return $this;
    }

    /**
     * @param $value
     *
     * @return $this
     */
    public function sectionId($value)
    {
        $this->sectionId = $value;

        return $this;
    }

    /**
     * @param $section string|\anu\models\Section|null
     *
     * @return $this
     * @throws \anu\base\InvalidConfigException
     */
    public function section($section)
    {
        if (\is_object($section)) {
            $this->sectionId = $section->id;

            return $this;
        }

        if (\is_string($section) && ($section = Anu::$app->getSections()->getSectionByHandle($section))) {
            $this->sectionId = $section->id;

            return $this;
        }

        return $this;
    }

    public function init()
    {

        parent::init(); // TODO: Change the autogenerated stub
    }

    /**
     * @return bool
     */
    protected function beforePrepare(): bool
    {
        // join in the products table

        $this->joinElementTable('entries');

        $record = new EntryRecord();
        $attributes = $record->getAttributes();
        $values = [];
        foreach ($attributes as $k => $v) {
            $values[] = 'entries.' . $k;
        }

        // select the price column
        $this->query->select($values);

        if ($this->enabled !== null) {
            if ($this->enabled) {
                //$this->subQuery->andWhere(['entries.enabled' => $this->enabled]);
            } else {
                //$this->subQuery->andWhere(['entries.enabled' => [0, 1]]);
            }
        }

        if ($this->sectionId) {
            $this->subQuery->andWhere(['entries.sectionId' => $this->sectionId]);
        }

        return parent::beforePrepare();
    }
}